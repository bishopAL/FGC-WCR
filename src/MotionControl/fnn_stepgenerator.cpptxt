#include <Eigen/Dense>
#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
#include <sys/mman.h>
#include <sys/time.h>
#include <unistd.h>
#include "robotcontrol.h"

using namespace Eigen;
using namespace std;

MatrixXd load_matrix(const string& filename, int rows, int cols) {
    MatrixXd mat(rows, cols); //从文件中读取矩阵数据。
    ifstream file(filename);//从文件中读取向量数据。

    if (file.is_open()) {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                file >> mat(i, j);
            }
        }
        file.close();
    } else {
        cout << "Unable to open file";
    }
    return mat;
} //从指定文件中读取矩阵数据，并将其存储在MatrixXd类型的变量中。

VectorXd load_vector(const string& filename, int size) {
    VectorXd vec(size);
    ifstream file(filename);

    if (file.is_open()) {
        for (int i = 0; i < size; ++i) {
            file >> vec(i);
        }
        file.close();
    } else {
        cout << "Unable to open file";
    }
    return vec;
}//从指定文件中读取向量数据，并将其存储在VectorXd类型的变量中。

MatrixXd relu(const MatrixXd& x) {
    return x.cwiseMax(0.0);
}//实现ReLU激活函数，即将输入矩阵中的负值设为0

fnn_outputcpt(std::vector<double>* vec)
{
    int inputNum = 6;
    int layer1Num = 8;
    int outputNum = 3; //定义输入、隐藏层和输出的大小。
    MatrixXd W1 = load_matrix("../fnn_model/fc1.weight_weight.txt", layer1Num, inputNum);
    VectorXd b1 = load_vector("../fnn_model/fc1.bias_weight.txt", layer1Num);
    MatrixXd W2 = load_matrix("../fnn_model/fc2.weight_weight.txt", outputNum, layer1Num);
    VectorXd b2 = load_vector("../fnn_model/fc2.bias_weight.txt", outputNum);//从文件中加载权重和偏置。

    // Example input
    VectorXd input(6);
    for (int i = 0; i < 6; ++i) 
    {
        input(i) = (*vec)[i];
    }

    // Forward pass
    MatrixXd layer1 = relu((input.transpose() * W1.transpose()).transpose() + b1);//进行第一层的计算并应用ReLU激活函数。
    MatrixXd output = (layer1.transpose() * W2.transpose()).transpose() + b2;//计算输出层的结果

    return output;
}

void fnn_stepmodify()
{
        //开始编写炳诚师兄布置的任务
        rbt.NextStep();
        // cout<<"rbt.mfLegCmdPos:"<<rbt.mfLegCmdPos<<endl;
        MatrixXd temp_matrix(4, 3);
        temp_matrix = rbt.mfLegCmdPos;

        // if(0==swing)  123;
        // if(1) 032
        // if(2) 301
        //if(3) 210
        std::vector<double> input(6);

        for(uint8_t legNum=0; legNum<4; legNum++) //遍寻4条腿
        {
        UpdateLegStatus(legNum); //更新腿的状态
        enum_LEGSTATUS ls=m_glLeg[legNum]->GetLegStatus(); //get present status
            if(ls!=stance&&ls!=recover)
            {
                if(ls!=stance)
                {
                    swingflag = legNum;
                }
            }
            switch(swingFlag)
            {
                case 0:
                    // 创建一个 6x1 的列向量，用于存储提取的元素
                    VectorXd colVec0(6);
                    // 提取矩阵的第一行、第四行和第三行的前两列，并按顺序拼接到列向量中
                    colVec0.segment<2>(0) = temp_matrix.block<1, 2>(1, 0).transpose(); // 提取第二行的前两列
                    colVec0.segment<2>(2) = temp_matrix.block<1, 2>(2, 0).transpose(); // 提取第三行的前两列
                    colVec0.segment<2>(4) = temp_matrix.block<1, 2>(3, 0).transpose(); // 提取第四行的前两列
                    input = colVec0;
                    break;
                case 1:
                    // 创建一个 6x1 的列向量，用于存储提取的元素
                    VectorXd colVec1(6);
                    // 提取矩阵的第一行、第四行和第三行的前两列，并按顺序拼接到列向量中
                    colVec1.segment<2>(0) = temp_matrix.block<1, 2>(0, 0).transpose(); // 提取第一行的前两列
                    colVec1.segment<2>(2) = temp_matrix.block<1, 2>(3, 0).transpose(); // 提取第四行的前两列
                    colVec1.segment<2>(4) = temp_matrix.block<1, 2>(2, 0).transpose(); // 提取第三行的前两列
                    input = colVec1;
                    break;
                case 2:
                    // 创建一个 6x1 的列向量，用于存储提取的元素
                    VectorXd colVec2(6);
                    colVec.segment<2>(0) = temp_matrix.block<1, 2>(3, 0).transpose(); // 提取第四行的前两列
                    colVec.segment<2>(2) = temp_matrix.block<1, 2>(0, 0).transpose(); // 提取第一行的前两列
                    colVec.segment<2>(4) = temp_matrix.block<1, 2>(1, 0).transpose(); // 提取第二行的前两列
                    input = colVec2;
                    break;
                case 3:
                    // 创建一个 6x1 的列向量，用于存储提取的元素
                    VectorXd colVec3(6);
                    colVec3.segment<2>(0) = temp_matrix.block<1, 2>(2, 0).transpose(); // 提取第三行的前两列
                    colVec3.segment<2>(2) = temp_matrix.block<1, 2>(1, 0).transpose(); // 提取第二行的前两列
                    colVec3.segment<2>(4) = temp_matrix.block<1, 2>(0, 0).transpose(); // 提取第一行的前两列
                    input = colVec3;
                    break;
            }
        } 

        VectorXd output(3);
        output = fnn_outputcpt(&input);

        //结束    
}
